Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
deleted file mode 100644
--- a/.idea/vcs.xml	(revision 860ab83df6740db3d15817e4437af88d96b50ddc)
+++ /dev/null	(revision 860ab83df6740db3d15817e4437af88d96b50ddc)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="" vcs="Git" />
-  </component>
-</project>
\ No newline at end of file
Index: src/main/java/org/generation/italy/esempiCorso/inheritance/school/Main.java
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/inheritance/school/Main.java b/src/main/java/org/generation/italy/esempiCorso/inheritance/school/Main.java
deleted file mode 100644
--- a/src/main/java/org/generation/italy/esempiCorso/inheritance/school/Main.java	(revision 860ab83df6740db3d15817e4437af88d96b50ddc)
+++ /dev/null	(revision 860ab83df6740db3d15817e4437af88d96b50ddc)
@@ -1,11 +0,0 @@
-package org.generation.italy.esempiCorso.inheritance.school;
-
-public class Main {
-    public static void main(String[] args) {
-        Teacher t1 = new Teacher("Mariardo", "Colla", 27, "Dormire", 25, 600, 12);
-        Personnel p1 = new Personnel("Giuseppe", "Bokka", 40, 1500, 13, "Scultore", 2000);
-
-        System.out.println(t1.toString());
-        System.out.println(p1.toString());
-    }
-}
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision 860ab83df6740db3d15817e4437af88d96b50ddc)
+++ /dev/null	(revision 860ab83df6740db3d15817e4437af88d96b50ddc)
@@ -1,3 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
Index: src/main/java/org/generation/italy/esempiCorso/inheritance/geometria/Main.java
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/inheritance/geometria/Main.java b/src/main/java/org/generation/italy/esempiCorso/inheritance/geometria/Main.java
deleted file mode 100644
--- a/src/main/java/org/generation/italy/esempiCorso/inheritance/geometria/Main.java	(revision 860ab83df6740db3d15817e4437af88d96b50ddc)
+++ /dev/null	(revision 860ab83df6740db3d15817e4437af88d96b50ddc)
@@ -1,10 +0,0 @@
-package org.generation.italy.esempiCorso.inheritance.geometria;
-
-public class Main {
-    public static void main(String[] args) {
-        Triangolo tr1 = new Triangolo(5, 6);
-        Rettangolo ret = new Rettangolo(3, 1);
-        System.out.println(tr1);
-        System.out.println(ret);
-    }
-}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
deleted file mode 100644
--- a/.idea/misc.xml	(revision 860ab83df6740db3d15817e4437af88d96b50ddc)
+++ /dev/null	(revision 860ab83df6740db3d15817e4437af88d96b50ddc)
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="MavenProjectsManager">
-    <option name="originalFiles">
-      <list>
-        <option value="$PROJECT_DIR$/pom.xml" />
-      </list>
-    </option>
-  </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="23" project-jdk-type="JavaSDK" />
-</project>
\ No newline at end of file
Index: src/main/java/org/generation/italy/esempiCorso/interfaces/Circle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.generation.italy.esempiCorso.interfaces;\r\n\r\npublic class Circle {\r\n    private double radius;\r\n    //variabile statica = dipende dalla classe, non dagli oggetti,\r\n    //.esiste una sola variabile radius\r\n     private final static double maxRadius=1000;\r\n     private static int counter = 0;\r\n\r\n    public Circle(double radius) {\r\n        if(radius>1000){\r\n            this.radius = maxRadius;\r\n        }else {\r\n            this.radius = radius;\r\n        }\r\n        counter++;\r\n    }\r\n\r\n    public Circle(){\r\n        this.radius = Math.random()*maxRadius;\r\n       // Math m1 = new Math();\r\n       // Math m2 = new Math();\r\n       // double r = m1.sin(10);\r\n       // double r2 = m2.sin(10);\r\n        double x = Math.sin(20);\r\n    }\r\n\r\n\r\n    public double calculatePerimeter(){\r\n        return 2*radius*Math.PI;\r\n    }\r\n\r\n    public static void main (String[] args){\r\n        //Circle c = new Circle(10);\r\n        //c.radius = 20;\r\n        //System.out.println(c.calculatePerimeter());\r\n        //Circle.radius = 10; //nomeClasse.nomeVariabile\r\n        //calculatePerimeter();\r\n        Circle c1 = new Circle(50);\r\n        Circle c2 = new Circle(100);\r\n        System.out.println(c1.radius);\r\n        System.out.println(c1.calculatePerimeter());\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/interfaces/Circle.java b/src/main/java/org/generation/italy/esempiCorso/interfaces/Circle.java
--- a/src/main/java/org/generation/italy/esempiCorso/interfaces/Circle.java	(revision 860ab83df6740db3d15817e4437af88d96b50ddc)
+++ b/src/main/java/org/generation/italy/esempiCorso/interfaces/Circle.java	(date 1729067530801)
@@ -1,6 +1,7 @@
 package org.generation.italy.esempiCorso.interfaces;
 
 public class Circle {
+
     private double radius;
     //variabile statica = dipende dalla classe, non dagli oggetti,
     //.esiste una sola variabile radius
@@ -41,5 +42,9 @@
         System.out.println(c1.radius);
         System.out.println(c1.calculatePerimeter());
 
+        Circle circle = new Circle(20);
+        circle.radius = 10;
+
+        System.out.println(circle.calculatePerimeter());
     }
 }
Index: src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Archivio.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Archivio.java b/src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Archivio.java
new file mode 100644
--- /dev/null	(date 1729067530802)
+++ b/src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Archivio.java	(date 1729067530802)
@@ -0,0 +1,33 @@
+package org.generation.italy.esempiCorso.ravenclaw.casa;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class Archivio {
+    List<Casa> ville = new ArrayList<>();
+    List<Casa> appartamenti = new ArrayList<>();
+
+    public Archivio(List<Casa> ville, List<Casa> appartamenti) {
+        this.ville = ville;
+        this.appartamenti = appartamenti;
+    }
+
+    public int mediaCosti(int n){
+        int sPrezzi = 0;
+        int q = 0;
+        for(Casa c : ville){
+            if(c.getSuperfice()>n){
+                sPrezzi += c.costoCasa();
+                q++;
+            }
+        }
+        for(Casa c : appartamenti){
+            if(c.getSuperfice()>n){
+                sPrezzi += c.costoCasa();
+                q++;
+            }
+        }
+        return sPrezzi/q;
+    }
+}
+//ðŸš€
\ No newline at end of file
Index: src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Appartamento.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Appartamento.java b/src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Appartamento.java
new file mode 100644
--- /dev/null	(date 1729067530802)
+++ b/src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Appartamento.java	(date 1729067530802)
@@ -0,0 +1,13 @@
+package org.generation.italy.esempiCorso.ravenclaw.casa;
+
+public class Appartamento extends Casa{
+    private int codiceEnergetico;
+    public Appartamento(int superfice, int nStanze, int codiceEnergetico){
+        super(superfice, nStanze);
+        this.codiceEnergetico = codiceEnergetico;
+    }
+    @Override
+    public int costoCasa(){
+        return superfice*1500 + nStanze*codiceEnergetico;
+    }
+}
\ No newline at end of file
Index: src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Start.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Start.java b/src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Start.java
new file mode 100644
--- /dev/null	(date 1729067530802)
+++ b/src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Start.java	(date 1729067530802)
@@ -0,0 +1,19 @@
+package org.generation.italy.esempiCorso.ravenclaw.casa;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class Start {
+    public static void main(String[] args) {
+        Casa c1 = new Villa(10, 10, true);
+        Casa c2 = new Villa(100, 10, false);
+        Casa c3 = new Appartamento(92, 4, 5);
+        Casa c4 = new Appartamento(32, 1, 3);
+
+        List<Casa> ville = List.of(c1, c2);
+        List<Casa> appartamenti = List.of(c3, c4);
+
+        Archivio caccola = new Archivio(ville, appartamenti);
+        System.out.println(caccola.mediaCosti(99));
+    }
+}
\ No newline at end of file
Index: src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Casa.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Casa.java b/src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Casa.java
new file mode 100644
--- /dev/null	(date 1729067530802)
+++ b/src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Casa.java	(date 1729067530802)
@@ -0,0 +1,23 @@
+package org.generation.italy.esempiCorso.ravenclaw.casa;
+
+public abstract class Casa {
+    protected int superfice, nStanze;
+
+    public Casa(int superfice, int nStanze) {
+        this.superfice = superfice;
+        this.nStanze = nStanze;
+    }
+    public int getSuperfice() {
+        return superfice;
+    }
+    public void setSuperfice(int superfice) {
+        this.superfice = superfice;
+    }
+    public int getnStanze() {
+        return nStanze;
+    }
+    public void setnStanze(int nStanze) {
+        this.nStanze = nStanze;
+    }
+    public abstract int costoCasa();
+}
\ No newline at end of file
Index: src/main/java/org/generation/italy/esempiCorso/interfaces/HumanBeing.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.generation.italy.esempiCorso.interfaces;\r\n\r\n interface  HumanBeing {\r\n  public static final int maxAge = 120;\r\n   //default public static final\r\n    //final = costante\r\n    //static =\r\n    public abstract void speak();\r\n     //visibilita' sempre public_ sottotinteso, idem abstract\r\n    //no metodi privati\r\n\r\n    public abstract void eat();\r\n    public abstract void work(int hours);\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/interfaces/HumanBeing.java b/src/main/java/org/generation/italy/esempiCorso/interfaces/HumanBeing.java
--- a/src/main/java/org/generation/italy/esempiCorso/interfaces/HumanBeing.java	(revision 860ab83df6740db3d15817e4437af88d96b50ddc)
+++ b/src/main/java/org/generation/italy/esempiCorso/interfaces/HumanBeing.java	(date 1729067530801)
@@ -1,15 +1,18 @@
 package org.generation.italy.esempiCorso.interfaces;
 
- interface  HumanBeing {
-  public static final int maxAge = 120;
-   //default public static final
-    //final = costante
-    //static =
-    public abstract void speak();
-     //visibilita' sempre public_ sottotinteso, idem abstract
-    //no metodi privati
+public interface HumanBeing {
+
+    //AN INTERFACE IS A NEW DATA TYPE THAT HOLDS STATIC VARIABLES AND METHODS
+
+    int maxAge = 120; //static final as default
+
+    //public abstract as default
+    void speak();
+
+    void eat();
 
-    public abstract void eat();
-    public abstract void work(int hours);
+    void work(int hours);
+
+
 
 }
Index: src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Villa.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Villa.java b/src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Villa.java
new file mode 100644
--- /dev/null	(date 1729067530803)
+++ b/src/main/java/org/generation/italy/esempiCorso/ravenclaw/casa/Villa.java	(date 1729067530803)
@@ -0,0 +1,19 @@
+package org.generation.italy.esempiCorso.ravenclaw.casa;
+
+public class Villa extends Casa{
+    private boolean piscina;
+    public Villa(int superfice, int nStanze, boolean piscina){
+        super(superfice, nStanze);
+        this.piscina = piscina;
+    }
+    @Override
+    public int costoCasa(){
+        int somma = superfice*2000;
+        if(piscina) {
+            somma += 20000;
+        }if (nStanze>10) {
+            somma += 10000;
+        }
+        return somma;
+    }
+}
\ No newline at end of file
Index: src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Barbarian.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Barbarian.java b/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Barbarian.java
new file mode 100644
--- /dev/null	(date 1729067530795)
+++ b/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Barbarian.java	(date 1729067530795)
@@ -0,0 +1,19 @@
+package org.generation.italy.esempiCorso.inheritance.exercise;
+
+import java.time.LocalDate;
+
+public class Barbarian extends Character {
+    public Barbarian(String name, String surname, String userName, String password, boolean isLogged, LocalDate startDate, int hp, int strength, int intelligence, int charisma, int agility) {
+        super(name, surname, userName, password, isLogged, startDate, hp, strength, intelligence, charisma, agility);
+    }
+
+    public void attack(){
+
+    }
+    public void defend(){
+
+    }
+    public void Berserk(){
+
+    }
+}
Index: src/main/java/org/generation/italy/esempiCorso/interfaces/SuperHero.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.generation.italy.esempiCorso.interfaces;\r\n\r\npublic class SuperHero extends Eater implements HumanBeing, FlyObject {\r\n             //prima le classi, poi interfacce\r\n    @Override\r\n    public void speak() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void vola() {\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public void work(int hours) {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/interfaces/SuperHero.java b/src/main/java/org/generation/italy/esempiCorso/interfaces/SuperHero.java
--- a/src/main/java/org/generation/italy/esempiCorso/interfaces/SuperHero.java	(revision 860ab83df6740db3d15817e4437af88d96b50ddc)
+++ b/src/main/java/org/generation/italy/esempiCorso/interfaces/SuperHero.java	(date 1729067530801)
@@ -1,17 +1,16 @@
 package org.generation.italy.esempiCorso.interfaces;
 
-public class SuperHero extends Eater implements HumanBeing, FlyObject {
-             //prima le classi, poi interfacce
+public class SuperHero implements HumanBeing{
+
     @Override
     public void speak() {
 
     }
 
     @Override
-    public void vola() {
+    public void eat() {
 
     }
-
 
     @Override
     public void work(int hours) {
Index: src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Amazon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Amazon.java b/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Amazon.java
new file mode 100644
--- /dev/null	(date 1729067530795)
+++ b/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Amazon.java	(date 1729067530795)
@@ -0,0 +1,21 @@
+package org.generation.italy.esempiCorso.inheritance.exercise;
+
+import java.time.LocalDate;
+
+public class Amazon extends Character {
+
+    public Amazon(String name, String surname, String userName, String password, boolean isLogged, LocalDate startDate, int hp, int strength, int intelligence, int charisma, int agility) {
+        super(name, surname, userName, password, isLogged, startDate, hp, strength, intelligence, charisma, agility);
+    }
+    @Override
+    public void attack(){
+
+    }
+    @Override
+    public void defend(){
+
+    }
+    public void Castrate(){
+
+    }
+}
Index: src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/GameMaster.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/GameMaster.java b/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/GameMaster.java
new file mode 100644
--- /dev/null	(date 1729067530796)
+++ b/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/GameMaster.java	(date 1729067530796)
@@ -0,0 +1,83 @@
+package org.generation.italy.esempiCorso.inheritance.exercise;
+
+import java.time.LocalDate;
+import java.util.Scanner;
+
+
+
+public class GameMaster {
+    public static void main(String[] args) {
+        Scanner sc = new Scanner(System.in);
+        String usName, pw;
+
+        //creazione personaggio e scelta della classe
+        Player p1 = new Player();
+        playerCreation(p1);
+
+        p1 = getCharacterClass(p1);
+        System.out.println(p1.toString());
+
+        //login
+        System.out.println("Vuoi effettuare il login? Inserisci username e password");
+        do {
+            usName = sc.nextLine();
+            pw = sc.nextLine();
+
+            if (p1.userName.equals(usName) && p1.password.equals(pw)) {
+                p1.login();
+            } else {
+                System.out.println("I dati sono errati, riprova");
+            }
+        } while (!p1.userName.equals(usName) || !p1.password.equals(pw));
+
+        //logout
+
+    sc.close();
+    }
+
+    public static void playerCreation(Player p){
+        Scanner sc = new Scanner(System.in);
+        System.out.println("Inserisci nome");
+        p.name = sc.nextLine();
+        System.out.println("Inserisci cognome");
+        p.surname = sc.nextLine();
+        System.out.println("Inserisci username");
+        p.userName = sc.nextLine();
+        System.out.println("Inserisci password");
+        p.password = sc.nextLine();
+        p.isLogged = false;
+        System.out.println("Inserisci la data di oggi");
+        p.startDate = LocalDate.of(sc.nextInt(), sc.nextInt(), sc.nextInt());
+        sc.nextLine();
+    }
+
+
+    public static Character getCharacterClass(Player p){
+        Scanner sc = new Scanner(System.in);
+        String classChoice;
+        do {
+            System.out.println("Che classe scegli? Puoi scegliere tra: Amazon, Barbarian, Mage, Paladin, Rogue");
+            classChoice = sc.nextLine();
+            if (classChoice.equalsIgnoreCase("Amazon")) {
+                Amazon ama = new Amazon(p.name, p.surname, p.userName, p.password, p.isLogged, p.startDate, 10, 15, 5, 5, 15);
+                return  ama;
+            } else if (classChoice.equalsIgnoreCase("Barbarian")) {
+                Barbarian bar = new Barbarian(p.name, p.surname, p.userName, p.password, p.isLogged, p.startDate, 15, 15, 5, 5, 10);
+                return bar;
+            } else if (classChoice.equalsIgnoreCase("Mage")) {
+                Mage mag = new Mage(p.name, p.surname, p.userName, p.password, p.isLogged, p.startDate, 10, 5, 20, 10, 5);
+                return mag;
+            } else if (classChoice.equalsIgnoreCase("Paladin")) {
+                Paladin pal = new Paladin(p.name, p.surname, p.userName, p.password, p.isLogged, p.startDate, 20, 10, 10, 5, 5);
+                return pal;
+            } else if (classChoice.equalsIgnoreCase("Rogue")) {
+                Rogue rog = new Rogue(p.name, p.surname, p.userName, p.password, p.isLogged, p.startDate, 10, 10, 5, 5, 20);
+                return rog;
+            } else {
+                System.out.println("Risposta non valida");
+            }
+        } while (!classChoice.equalsIgnoreCase("Amazon") && !classChoice.equalsIgnoreCase("Barbarian") && !classChoice.equalsIgnoreCase("Mage") && !classChoice.equalsIgnoreCase("Paladin") && !classChoice.equalsIgnoreCase("Rogue"));
+        return null;
+    }
+}
+
Index: src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Character.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Character.java b/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Character.java
new file mode 100644
--- /dev/null	(date 1729067530796)
+++ b/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Character.java	(date 1729067530796)
@@ -0,0 +1,34 @@
+package org.generation.italy.esempiCorso.inheritance.exercise;
+
+import java.time.LocalDate;
+import java.util.Scanner;
+
+public abstract class Character extends Player {
+    protected String charClass;
+    protected int hp, strength, intelligence, charisma, agility;
+
+    public Character(String name, String surname, String userName, String password, boolean isLogged, LocalDate startDate, int hp, int strength, int intelligence, int charisma, int agility) {
+        super(name, surname, userName, password, isLogged, startDate);
+        //this.charClass = charClass;
+        this.hp = hp;
+        this.strength = strength;
+        this.intelligence = intelligence;
+        this.charisma = charisma;
+        this.agility = agility;
+    }
+
+    public abstract void attack();
+    public abstract void defend();
+    public void flee(){
+        System.out.println("Mi sto cagando addosso, aiutoooooo \nVaffanculo, ciao\nDatemi un water!!1!1");
+    }
+    public String toString() {
+        return super.toString() + String.format("Hp: %d %nStrength: %d %nIntelligence: %d %nCharisma: %d %nAgility: %d %n", hp, strength, intelligence, charisma, agility);
+    }
+}
+// La classe player viene estesa da una classe Character
+// La classe char avrÃ  interi per Punti vita, Forza, Intelligenza, Carisma, AgilitÃ 
+// ed un metodo professione: getCharacterClass, che restituisce la professione del personaggio
+// Il character avrÃ  i metodi Attacca che prende in input un character(
+// ed uno Difendi che prende in input un character (quello che mi sta attaccando)
+// e Scappa che interrompe il combattimento
\ No newline at end of file
Index: src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Paladin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Paladin.java b/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Paladin.java
new file mode 100644
--- /dev/null	(date 1729067530796)
+++ b/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Paladin.java	(date 1729067530796)
@@ -0,0 +1,19 @@
+package org.generation.italy.esempiCorso.inheritance.exercise;
+
+import java.time.LocalDate;
+
+public class Paladin extends Character {
+    public Paladin(String name, String surname, String userName, String password, boolean isLogged, LocalDate startDate, int hp, int strength, int intelligence, int charisma, int agility) {
+        super(name, surname, userName, password, isLogged, startDate, hp, strength, intelligence, charisma, agility);
+    }
+
+    public void attack(){
+
+    }
+    public void defend(){
+
+    }
+    public void Heal(){
+
+    }
+}
Index: src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Mage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Mage.java b/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Mage.java
new file mode 100644
--- /dev/null	(date 1729067530796)
+++ b/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Mage.java	(date 1729067530796)
@@ -0,0 +1,20 @@
+package org.generation.italy.esempiCorso.inheritance.exercise;
+
+import java.time.LocalDate;
+
+public class Mage extends Character{
+
+    public Mage(String name, String surname, String userName, String password, boolean isLogged, LocalDate startDate, int hp, int strength, int intelligence, int charisma, int agility) {
+        super(name, surname, userName, password, isLogged, startDate, hp, strength, intelligence, charisma, agility);
+    }
+
+    public void attack(){
+
+    }
+    public void defend(){
+
+    }
+    public void Berserk(){
+
+    }
+}
Index: src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Rogue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Rogue.java b/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Rogue.java
new file mode 100644
--- /dev/null	(date 1729067530796)
+++ b/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Rogue.java	(date 1729067530796)
@@ -0,0 +1,19 @@
+package org.generation.italy.esempiCorso.inheritance.exercise;
+
+import java.time.LocalDate;
+
+public class Rogue extends Character {
+    public Rogue(String name, String surname, String userName, String password, boolean isLogged, LocalDate startDate, int hp, int strength, int intelligence, int charisma, int agility) {
+        super(name, surname, userName, password, isLogged, startDate, hp, strength, intelligence, charisma, agility);
+    }
+
+    public void attack(){
+
+    }
+    public void defend(){
+
+    }
+    public void Steal(){
+
+    }
+}
Index: src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Player.java b/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Player.java
new file mode 100644
--- /dev/null	(date 1729067530796)
+++ b/src/main/java/org/generation/italy/esempiCorso/inheritance/exercise/Player.java	(date 1729067530796)
@@ -0,0 +1,98 @@
+package org.generation.italy.esempiCorso.inheritance.exercise;
+
+import java.time.LocalDate;
+import java.time.format.DateTimeFormatter;
+
+public class Player {
+    protected String name, surname, userName, password;
+    protected boolean isLogged;
+    protected LocalDate startDate;
+
+    public Player(){
+
+    }
+
+    public Player(String name, String surname, String userName, String password, boolean isLogged, LocalDate startDate) {
+        this.name = name;
+        this.surname = surname;
+        this.userName = userName;
+        this.password = password;
+        this.isLogged = isLogged;
+        this.startDate = startDate;
+    }
+
+    /*
+    public void setName(String name) {
+        this.name = name;
+    }
+    public void setSurname(String surname) {
+        this.surname = surname;
+    }
+    public void setUserName(String userName) {
+        this.userName = userName;
+    }
+    public void setPassword(String password) {
+        this.password = password;
+    }
+    public void setLogged(boolean logged) {
+        isLogged = logged;
+    }
+    public void setStartDate(LocalDate startDate) {
+        this.startDate = startDate;
+    }
+    */
+
+
+
+    public void login(){
+            isLogged = true;
+            System.out.println("Hai effettuato il login con successo");
+    }
+    public void logout(){
+        isLogged = false;
+        System.out.println("Hai effettuato il logout");
+    }
+    @Override
+    public String toString(){
+        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
+        String a = startDate.format(formatter);
+        return String.format("Nome: %s%nCognome: %s%nUsername: %s%nData creazione player: %s%n", name, surname, userName, a);
+    }
+}
+// Voglio rappresentare un gioco testuale in cui vari personaggi di un mondo fantasy possano combattere tra di loro
+// Il player Ã¨ un'entitÃ  che ha un nome e cognome (li stessi del giocatore), poi un nome del personaggio,una password,
+// booleano che dice se sia loggato o meno ed una data di quando il player ha cominciato a giocare
+
+// La classe salva anche la data dalla quale il player ha cominciato a giocare
+// La classe ha un metodo login ed uno logout;
+// login prende in input nome e password e restituisce se sia loggato o meno
+// logout che setta il booleano false
+
+// La classe player viene estesa da una classe Character
+// La classe char avrÃ  interi per Punti vita, Forza, Intelligenza, Carisma, AgilitÃ 
+// ed un metodo professione: getCharacterClass, che restituisce la professione del personaggio
+// Il character avrÃ  i metodi Attacca che prende in input un character(
+// ed uno Difendi che prende in input un character (quello che mi sta attaccando)
+// e Scappa che interrompe il combattimento
+
+// Altri classi che estendono Character: Paladin, Mage, Amazon, Barbarian, Rogue
+// Alcune di queste classi avrÃ  metodi loro:
+// Paladin ha il metodo heal che gli permette di recuperare punti vita
+// Mage avrÃ  throw fireball
+// Amazon avrÃ  castrate
+// Barbarian avrÃ  berserk che gli boosta le stat
+// rogue avrÃ  steal che permette di rubare armi dell'avversario
+
+// Il programma fa combattere i personaggi
+// Funziona cosÃ¬; fight: metodo che prende in input 2 Character,
+// ciclo while che va avanti finchÃ¨ un giocatore muore o scappa
+// durante il ciclo ogni giocatore puÃ² fare 2 azioni (attacca o difendi)
+// 1 iterazione su 5 il character puÃ² usare la sua abilitÃ  speciale
+
+
+// Ogni personaggio partirÃ  da una base di stats in base al suo tipo ovviamente, tutti avranno la stessa somma di punti
+// base, poi avranno n punti che inserirÃ  l'utente con uno scanner da scegliersi con eventuali robe in piÃ¹.
+
+// d20; da 1 a 5 scazzi tutto, da 6 a 15 fai l'attacco normale o la difesa normale, da 16 a 20 final
+
+// Character avrÃ  anche un sesso
\ No newline at end of file
Index: src/main/java/org/generation/italy/esempiCorso/inheritance/geometria/mainRunner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/inheritance/geometria/mainRunner.java b/src/main/java/org/generation/italy/esempiCorso/inheritance/geometria/mainRunner.java
new file mode 100644
--- /dev/null	(date 1729067530799)
+++ b/src/main/java/org/generation/italy/esempiCorso/inheritance/geometria/mainRunner.java	(date 1729067530799)
@@ -0,0 +1,12 @@
+package org.generation.italy.esempiCorso.inheritance.geometria;
+
+public class mainRunner {
+    public static void main(String[] args) {
+
+        Triangolo triangle = new Triangolo(3,2);
+        Rettangolo rectangle = new Rettangolo(2, 10);
+
+        System.out.println(triangle.calcolaArea());
+        System.out.println(rectangle.calcolaArea());
+    }
+}
Index: src/main/java/org/generation/italy/esempiCorso/inheritance/geometria/GeometriaPro.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/inheritance/geometria/GeometriaPro.java b/src/main/java/org/generation/italy/esempiCorso/inheritance/geometria/GeometriaPro.java
new file mode 100644
--- /dev/null	(date 1729067530798)
+++ b/src/main/java/org/generation/italy/esempiCorso/inheritance/geometria/GeometriaPro.java	(date 1729067530798)
@@ -0,0 +1,11 @@
+package org.generation.italy.esempiCorso.inheritance.geometria;
+
+public class GeometriaPro {
+    public static void main(String[] args) {
+        Rettangolo r1 = new Rettangolo(10, 15);
+        Triangolo t1 = new Triangolo(8, 14);
+
+        System.out.println(r1.calcolaArea());
+        System.out.println(t1.calcolaArea());
+    }
+}
Index: src/main/java/org/generation/italy/esempiCorso/inheritance/school/Start.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/inheritance/school/Start.java b/src/main/java/org/generation/italy/esempiCorso/inheritance/school/Start.java
new file mode 100644
--- /dev/null	(date 1729067530800)
+++ b/src/main/java/org/generation/italy/esempiCorso/inheritance/school/Start.java	(date 1729067530800)
@@ -0,0 +1,20 @@
+package org.generation.italy.esempiCorso.inheritance.school;
+
+import java.util.Arrays;
+
+public class Start {
+    public static void main(String[] args) {
+
+        Teacher teacher = new Teacher("Michael", "Johnson", 35, "Math", 11, 2500, 14);
+        Personnel bidello = new Personnel("Bobby", "Rocket", 67, 1500, 14, 200, "Bidello");
+
+        System.out.println(teacher.toString());
+        System.out.println("\n");
+        System.out.println(bidello.toString());
+
+        System.out.println("\n\n");
+
+        String[] arrayDiRocket = {"\uD83D\uDE80,\uD83D\uDE80,\uD83D\uDE80,\uD83D\uDE80,\uD83D\uDE80,\uD83D\uDE80,\uD83D\uDE80,\uD83D\uDE80,\uD83D\uDE80,\uD83D\uDE80"};
+        System.out.println(Arrays.toString(arrayDiRocket));
+    }
+}
\ No newline at end of file
Index: src/main/java/org/generation/italy/esempiCorso/collezioniamo/Iteriamo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/collezioniamo/Iteriamo.java b/src/main/java/org/generation/italy/esempiCorso/collezioniamo/Iteriamo.java
new file mode 100644
--- /dev/null	(date 1729067530795)
+++ b/src/main/java/org/generation/italy/esempiCorso/collezioniamo/Iteriamo.java	(date 1729067530795)
@@ -0,0 +1,26 @@
+package org.generation.italy.esempiCorso.collezioniamo;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class Iteriamo {
+    public static void main(String[] args) {
+        // voglio fare una lista della spesa
+        List<Prodotto> prodotti = new ArrayList<>();
+
+        // aggiungere dei prodotti
+        prodotti.add(new Prodotto("farina", 8));
+        prodotti.add(new Prodotto("pomodoro", 5));
+        prodotti.add(new Prodotto("mozzarella", 8));
+        prodotti.add(new Prodotto("origano", 3));
+
+        System.out.println(prodotti.size());
+
+        Prodotto prodotto = prodotti.get(0);
+
+        int costoTotale = 0;
+        for (Prodotto p : prodotti) {
+            costoTotale += prodotto.costo;
+        }
+    }
+}
\ No newline at end of file
Index: src/main/java/org/generation/italy/esempiCorso/collezioniamo/Start.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/collezioniamo/Start.java b/src/main/java/org/generation/italy/esempiCorso/collezioniamo/Start.java
new file mode 100644
--- /dev/null	(date 1729067530795)
+++ b/src/main/java/org/generation/italy/esempiCorso/collezioniamo/Start.java	(date 1729067530795)
@@ -0,0 +1,61 @@
+package org.generation.italy.esempiCorso.collezioniamo;
+
+import java.util.*;
+
+public class Start {
+    public static void main(String[] args) {
+        String[] nomiClasseMarcio = new String[10];
+
+        // interfaccia Collection; contiene metodi di utilitÃ  per lavorare sulle collezioni
+        // list: insieme di elementi ordinati che hanno una dimensione ordinata
+
+        List<String> nomiClasse = new ArrayList<>();
+        nomiClasse.add("Pino");
+        nomiClasse.add("Lina");
+
+        List<Integer> numeri = new ArrayList<>();
+
+        // nomiClasse.remove(1);
+        // nomiClasse.remove("Lina");
+
+        String lina = nomiClasse.get(1);
+
+        for (int i = 0; i < nomiClasse.size(); i ++) {
+            System.out.println(nomiClasse.get(i));
+        }
+
+        // for each:
+        // sulla sinistra ho il singolo elemento che sto scorrendo || sulla destra ho il nome della mia collezione
+        for (String s : nomiClasse) { // per ogni s contenuta in nomiClasse
+            System.out.println(s);  // printami s
+        }
+
+        List<Prodotto> listLink = new LinkedList<>();
+            listLink.add(new Prodotto("pane", 4));
+        // il prodotto viene wrappato dentro un altro oggetto
+        // il nuovo oggetto conterrÃ  l'oggetto in questione + 2 reference; una all'oggetto precedente, una al successivo
+        // prodotto1 <-> prodotto2 <-> prodotto3
+        //
+        // prodotto1[null, prodotto1, rprodotto2]
+        // prodotto 2[rprodotto1, prodotto2, rprodotto3]
+        // prodotto 3[rprodotto2, prodotto3, null]
+
+        // set:
+        // insieme di elementi non ordinato e non ammette duplicati
+
+        Set<Integer> numSet = new HashSet<>();
+        numSet.add(19);
+        numSet.add(20);
+        numSet.add(19); // questo verrÃ  ignorato perchÃ¨ i Set non ammettono duplicati
+
+        Set<Prodotto> prodotti = new HashSet<>();
+        prodotti.add(new Prodotto("pane", 4));
+        prodotti.add(new Prodotto("pane", 4));
+
+        System.out.println(prodotti.size()); // qui stampa 2 perchÃ¨ nonostanti i due oggetti abbiano lo stesso contenuto
+                                             // sono comunque e oggetti diversi con 2 reference diverse
+        String s1 = "Pippo";
+        String s2 = "Pippo";
+        System.out.println(s1 == s2);
+    }
+}
Index: src/main/java/org/generation/italy/esempiCorso/collezioniamo/Prodotto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/collezioniamo/Prodotto.java b/src/main/java/org/generation/italy/esempiCorso/collezioniamo/Prodotto.java
new file mode 100644
--- /dev/null	(date 1729067530795)
+++ b/src/main/java/org/generation/italy/esempiCorso/collezioniamo/Prodotto.java	(date 1729067530795)
@@ -0,0 +1,11 @@
+package org.generation.italy.esempiCorso.collezioniamo;
+
+public class Prodotto {
+    String nome;
+    int costo;
+
+    public Prodotto(String nome, int costo) {
+        this.nome = nome;
+        this.costo = costo;
+    }
+}
Index: src/main/java/org/generation/italy/esempiCorso/collection/Prodotto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/collection/Prodotto.java b/src/main/java/org/generation/italy/esempiCorso/collection/Prodotto.java
new file mode 100644
--- /dev/null	(date 1729067530793)
+++ b/src/main/java/org/generation/italy/esempiCorso/collection/Prodotto.java	(date 1729067530793)
@@ -0,0 +1,21 @@
+package org.generation.italy.esempiCorso.collection;
+
+public class Prodotto {
+
+    protected String descrizione;
+    protected int costo;
+
+    public Prodotto(String descrizione, int costo) {
+        this.descrizione = descrizione;
+        this.costo = costo;
+    }
+
+
+    /**
+     * ciao a tutti
+     * @return
+     */
+    public static String acaso(){
+        return "ciao";
+    }
+}
Index: src/main/java/org/generation/italy/esempiCorso/collection/Iteriamo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/collection/Iteriamo.java b/src/main/java/org/generation/italy/esempiCorso/collection/Iteriamo.java
new file mode 100644
--- /dev/null	(date 1729067530793)
+++ b/src/main/java/org/generation/italy/esempiCorso/collection/Iteriamo.java	(date 1729067530793)
@@ -0,0 +1,39 @@
+package org.generation.italy.esempiCorso.collection;
+
+import java.util.ArrayList;
+import java.util.LinkedList;
+import java.util.List;
+
+public class Iteriamo {
+    public static void main(String[] args) {
+        //voglio fare una lista della spesa
+
+        List<Prodotto> prodotti = new ArrayList<>();
+
+
+        //aggiungere profotti
+        prodotti.add (new Prodotto("Pane",3));
+        prodotti.add(new Prodotto("Carne", 3));
+        prodotti.add(new Prodotto("palo", 3));
+
+        System.out.println(prodotti.size());
+
+        Prodotto.acaso();
+
+        int costotot = 0;
+        for (Prodotto p : prodotti){
+            System.out.println(p.descrizione);
+            costotot += p.costo;
+        }
+        System.out.println(costotot);
+
+        List<Prodotto> listLint = new LinkedList<>(); //utile quando vogliamo aggiungere velocemente elementi in coda o in testa -- usata molto poco
+        listLint.add(new Prodotto("Pane",1)); //ogni argomento che aggiungiamo a linked list viene chiamato nodo - Il prodotto viene wrappato all interno di un altro oggetto che avra il prodotto e il riferimento al prodotto precedente e al successivo, come una catena.
+
+
+
+
+
+
+    }
+}
Index: src/main/java/org/generation/italy/esempiCorso/collection/Start.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/generation/italy/esempiCorso/collection/Start.java b/src/main/java/org/generation/italy/esempiCorso/collection/Start.java
new file mode 100644
--- /dev/null	(date 1729067530794)
+++ b/src/main/java/org/generation/italy/esempiCorso/collection/Start.java	(date 1729067530794)
@@ -0,0 +1,78 @@
+package org.generation.italy.esempiCorso.collection;
+
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+public class Start {
+    public static void main(String[] args) {
+
+        //ARRAY - DIMENSIONE FISSA
+        String[] nomi = new String[10];
+        nomi[0] = "Pino";
+
+        //INTERFACCIA COLLECTION, CONTIENE AL SUO INTERNO MEDODI DI UTILITA PER LAVORARE SULLE COLLEZIONI.
+
+        //LIST - NON HA LIMITE DI GRANDEZZA - INSIEME DI ELEMENTI ORDINATI, HANNO UNA DIMENSIONE VARIABILE
+        List<String> nomiClasse =  new ArrayList<>();
+        nomiClasse.add("Pino");
+        nomiClasse.add("Lino");
+        nomiClasse.add("Gino");
+        nomiClasse.add("Tino");
+//        nomiClasse.remove(1); //remove sia per indice che per oggetto.
+
+//        List<String> names = List.of("Pino","Gino"); //non modificabile
+        List<String> names = new ArrayList<>(List.of("Pino","Gino","Lina")); //popolamento lista
+
+        //un array list compatta direttamente senza lasciare spazi vuoti
+        System.out.println(nomiClasse);
+        System.out.println(names);
+
+        System.out.println(nomiClasse.get(1));
+
+        String Gino = nomiClasse.get(1);
+
+        System.out.println(Gino);
+        System.out.println("\n");
+
+        for (String i : nomiClasse) { //ENHANCED FOR TO PRINT ELEMENTS OF A LIST
+            System.out.println(i);
+        }
+        System.out.println("\n");
+
+        //SET
+        //non ordinato e non ammette duplicati
+
+        Set<Integer> numbers = new HashSet<>();
+        numbers.add(19);
+        numbers.add(20);
+        numbers.add(21);
+        numbers.add(19); //viene automaticamente omesso
+
+        System.out.println(numbers);
+
+        Set<String> saluti = new HashSet<>();
+        saluti.add("hello");
+        saluti.add("Hola");
+        saluti.add("Ciao");
+
+        System.out.println(saluti);
+
+        Set<Prodotto> prodotti = new HashSet<>();
+
+        prodotti.add(new Prodotto("Pane",22));
+
+        String s1 = "pippo";
+        String s2 = "pippo";
+        System.out.println(s1==s2);
+
+        Prodotto p1 = new Prodotto("Bicicletta",100);
+        Prodotto p2 = new Prodotto("Bicicletta",100);
+        System.out.println(p1==p2);
+
+
+
+
+    }
+}
